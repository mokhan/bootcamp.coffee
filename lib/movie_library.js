// Generated by CoffeeScript 1.6.3
var Enumerable, Module, MovieLibrary, Studio, moduleKeywords,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Studio = require('./studio');

Enumerable = {
  any: function(predicate) {
    var result,
      _this = this;
    result = false;
    this.each(function(item) {
      result = predicate(item);
      if (result) {

      }
    });
    return result;
  },
  includes: function(other_item) {
    var result,
      _this = this;
    result = false;
    this.each(function(item) {
      return result || (result = item === other_item || item.equals(other_item));
    });
    return result;
  },
  find_all: function(predicate) {
    var results,
      _this = this;
    results = [];
    this.each(function(item) {
      if (predicate(item)) {
        return results.push(item);
      }
    });
    return results;
  }
};

moduleKeywords = ['extended', 'included'];

Module = (function() {
  function Module() {}

  Module.include = function(object) {
    var key, value, _ref;
    for (key in object) {
      value = object[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this.prototype[key] = value;
      }
    }
    if ((_ref = object.included) != null) {
      _ref.apply(this);
    }
    return this;
  };

  return Module;

})();

module.exports = MovieLibrary = (function(_super) {
  __extends(MovieLibrary, _super);

  MovieLibrary.include(Enumerable);

  function MovieLibrary() {
    this.movies = [];
  }

  MovieLibrary.prototype.add = function(movie) {
    if (!this.includes(movie)) {
      return this.movies.push(movie);
    }
  };

  MovieLibrary.prototype.count = function() {
    return this.movies.length;
  };

  MovieLibrary.prototype.each = function(visitor) {
    var movie, _i, _len, _ref, _results;
    _ref = this.movies;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      movie = _ref[_i];
      _results.push(visitor(movie));
    }
    return _results;
  };

  MovieLibrary.prototype.find_all_movies_by_pixar = function() {
    var _this = this;
    return this.find_all(function(movie) {
      return movie.studio === Studio.Pixar;
    });
  };

  return MovieLibrary;

})(Module);
